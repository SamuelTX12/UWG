using System;
using System.Collections.Generic;
using System.Linq;

// Custom Priority Queue Implementation for Dijkstra's Algorithm (Weighted Graphs)
public class PriorityQueue<T>
{
    private List<(T item, int priority)> heap = new List<(T, int)>();

    public int Count => heap.Count;

    public void Enqueue(T item, int priority)
    {
        heap.Add((item, priority));
        int currentIndex = heap.Count - 1;

        while (currentIndex > 0)
        {
            int parentIndex = (currentIndex - 1) / 2;
            if (heap[currentIndex].priority >= heap[parentIndex].priority)
                break;

            (heap[currentIndex], heap[parentIndex]) = (heap[parentIndex], heap[currentIndex]);
            currentIndex = parentIndex;
        }
    }

    public bool TryDequeue(out T item, out int priority)
    {
        if (heap.Count == 0)
        {
            item = default(T);
            priority = default(int);
            return false;
        }

        (item, priority) = heap[0];
        var lastItem = heap[heap.Count - 1];
        heap.RemoveAt(heap.Count - 1);

        if (heap.Count > 0)
        {
            heap[0] = lastItem;
            int currentIndex = 0;

            while (true)
            {
                int leftChild = 2 * currentIndex + 1;
                int rightChild = 2 * currentIndex + 2;
                int smallest = currentIndex;

                if (leftChild < heap.Count && heap[leftChild].priority < heap[smallest].priority)
                    smallest = leftChild;
                if (rightChild < heap.Count && heap[rightChild].priority < heap[smallest].priority)
                    smallest = rightChild;

                if (smallest == currentIndex)
                    break;

                (heap[currentIndex], heap[smallest]) = (heap[smallest], heap[currentIndex]);
                currentIndex = smallest;
            }
        }
        return true;
    }
}

public class InfluenceScoreCalculator
{
    // BFS for shortest path calculation in unweighted graphs
    public static int BFSShortestPath(Dictionary<string, List<string>> graph, string start, string end)
    {
        var queue = new Queue<string>();
        var visited = new HashSet<string>();
        var distance = new Dictionary<string, int>();

        queue.Enqueue(start);
        visited.Add(start);
        distance[start] = 0;

        while (queue.Count > 0)
        {
            string node = queue.Dequeue();

            foreach (var neighbor in graph[node])
            {
                if (!visited.Contains(neighbor))
                {
                    visited.Add(neighbor);
                    queue.Enqueue(neighbor);
                    distance[neighbor] = distance[node] + 1;

                    if (neighbor == end)
                        return distance[neighbor];
                }
            }
        }
        return int.MaxValue; // No path exists
    }

    // Dijkstra's Algorithm for shortest path in weighted graphs using a custom priority queue
    public static int DijkstraShortestPath(Dictionary<string, List<(string, int)>> graph, string start, string end)
    {
        var distances = new Dictionary<string, int>();
        var priorityQueue = new PriorityQueue<string>();
        var visited = new HashSet<string>();

        foreach (var node in graph.Keys)
            distances[node] = int.MaxValue;

        distances[start] = 0;
        priorityQueue.Enqueue(start, 0);

        while (priorityQueue.Count > 0)
        {
            priorityQueue.TryDequeue(out string currentNode, out int currentDistance);

            if (visited.Contains(currentNode))
                continue;

            visited.Add(currentNode);

            if (currentNode == end)
                return currentDistance;

            foreach (var (neighbor, weight) in graph[currentNode])
            {
                int newDistance = currentDistance + weight;
                if (newDistance < distances[neighbor])
                {
                    distances[neighbor] = newDistance;
                    priorityQueue.Enqueue(neighbor, newDistance);
                }
            }
        }

        return int.MaxValue; // No path found
    }

    // Influence Score Calculation for Unweighted Graphs
    public static double CalculateInfluenceScoreUnweighted(Dictionary<string, List<string>> graph, string node)
    {
        int n = graph.Count;
        int sumOfDistances = 0;

        foreach (var otherNode in graph.Keys)
        {
            if (otherNode != node)
            {
                int distance = BFSShortestPath(graph, node, otherNode);
                if (distance != int.MaxValue)
                    sumOfDistances += distance;
            }
        }

        return sumOfDistances == 0 ? 0 : (n - 1) / (double)sumOfDistances;
    }

    // Influence Score Calculation for Weighted Graphs
    public static double CalculateInfluenceScoreWeighted(Dictionary<string, List<(string, int)>> graph, string node)
    {
        int n = graph.Count;
        int sumOfDistances = 0;

        foreach (var otherNode in graph.Keys)
        {
            if (otherNode != node)
            {
                int distance = DijkstraShortestPath(graph, node, otherNode);
                if (distance != int.MaxValue)
                    sumOfDistances += distance;
            }
        }

        return sumOfDistances == 0 ? 0 : (n - 1) / (double)sumOfDistances;
    }

    // Sample Unweighted Graph
    public static Dictionary<string, List<string>> GetUnweightedGraph()
    {
        return new Dictionary<string, List<string>>()
        {
            {"Alicia", new List<string> {"Britney"}},
            {"Britney", new List<string> {"Alicia", "Claire"}},
            {"Claire", new List<string> {"Britney", "Diana"}},
            {"Diana", new List<string> {"Claire", "Edward", "Harry"}},
            {"Edward", new List<string> {"Diana", "Harry", "Gloria"}},
            {"Harry", new List<string> {"Diana", "Edward", "Gloria"}},
            {"Gloria", new List<string> {"Edward", "Harry", "Fred"}},
            {"Fred", new List<string> {"Gloria"}}
        };
    }

    // Sample Weighted Graph
    public static Dictionary<string, List<(string, int)>> GetWeightedGraph()
    {
        return new Dictionary<string, List<(string, int)>>()
        {
            {"A", new List<(string, int)> {("B", 1), ("C", 1), ("E", 5)}},
            {"B", new List<(string, int)> {("C", 4), ("E", 1), ("G", 1)}},
            {"C", new List<(string, int)> {("D", 3), ("E", 3)}},
            {"D", new List<(string, int)> {("F", 5)}},
            {"E", new List<(string, int)> {("F", 2), ("G", 2)}},
            {"G", new List<(string, int)> {("H", 3)}},
            {"H", new List<(string, int)> {("I", 3)}},
            {"I", new List<(string, int)> {("J", 3)}}
        };
    }

    // Main method with options for both unweighted and weighted influence score calculation
    public static void Main()
    {
        Console.WriteLine("Choose the type of graph:");
        Console.WriteLine("1. Unweighted Graph");
        Console.WriteLine("2. Weighted Graph");
        Console.Write("Enter your choice: ");

        int choice;
        if (!int.TryParse(Console.ReadLine(), out choice) || (choice != 1 && choice != 2))
        {
            Console.WriteLine("Invalid input. Please enter 1 or 2.");
            return;
        }

        if (choice == 1)
        {
            var graph = GetUnweightedGraph();
            Console.Write("Enter the node for influence score calculation: ");
            string node = Console.ReadLine();
            double score = CalculateInfluenceScoreUnweighted(graph, node);
            Console.WriteLine($"Influence score for {node}: {score}");
        }
        else if (choice == 2)
        {
            var graph = GetWeightedGraph();
            Console.Write("Enter the node for influence score calculation: ");
            string node = Console.ReadLine();
            double score = CalculateInfluenceScoreWeighted(graph, node);
            Console.WriteLine($"Influence score for {node}: {score}");
        }
    }
}




